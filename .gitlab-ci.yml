image: maven:3.6.3-jdk-11-slim
stages:
  - release
  - build_maven
  - build_jfrog_artifactory
  - test
  - build_push_docker_registry
  - deploy

variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  SPRING_PROFILES_ACTIVE: ${CI_COMMIT_REF_NAME}

cache:
  paths:
    - $CI_PROJECT_DIR/.m2/repository

maven_release_job:
  stage: release
  before_script:
    - 'which git || (apt-get update && apt-get install -y git)'
    - git config --global user.name ${RELEASE_USER_NAME}
    - git config --global user.email ${RELEASE_USER_EMAIL}
  script:
    - git checkout -B ${CI_BUILD_REF_NAME}
    - mvn $MAVEN_CLI_OPTS -s ${MAVEN_SETTINGS_XML} release:clean release:prepare release:perform -DreleaseVersion=${RELEASE_VERSION} -DdevelopmentVersion=${NEXT_SNAPSHOT_VERSION}
  when: manual
  only:
    refs:
      - master

maven_build_job:
  stage: build_maven
  only:
    changes:
      - hotel/**/*
  script:
    - mvn $MAVEN_CLI_OPTS clean install -DskipTests
  artifacts:
    when: on_success
    expire_in: 45 min
    paths:
      - hotel/target/*.jar

jfrog_build_job:
  stage: build_jfrog_artifactory
  only:
    changes:
      - hotel/**/*
  before_script:
    - curl -fL https://getcli.jfrog.io | sh
    - ./jfrog rt c ${JFROG_ARTIFACTORY_REPO} --url ${JFROG_ARTIFACTORY_URL} --user ${JFROG_ARTIFACTORY_USER} --apikey ${JFROG_ARTIFACTORY_API_KEY}
    - ./jfrog rt c show
    - ./jfrog rt mvnc --server-id-deploy ${JFROG_ARTIFACTORY_REPO} --repo-deploy-releases ${JFROG_ARTIFACTORY_REPO} --repo-deploy-snapshots ${JFROG_ARTIFACTORY_REPO}
    - export M2_HOME=/usr/share/maven
  script:
    - ./jfrog rt mvn clean install --build-name=${JFROG_ARTIFACTORY_BUILD_NAME} --build-number=${CI_JOB_ID}
    - ./jfrog rt bce ${JFROG_ARTIFACTORY_BUILD_NAME} ${CI_JOB_ID}
    - ./jfrog rt bp ${JFROG_ARTIFACTORY_BUILD_NAME} ${CI_JOB_ID} --env-exclude "*KEY*;*TOKEN*;SSH*"

maven_test_job:
  stage: test
  only:
    changes:
      - hotel/**/*
  script:
    - mvn $MAVEN_CLI_OPTS verify -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}

maven_sonar_job:
  stage: test
  only:
    changes:
      - hotel/**/*
  script:
    - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar -Dsonar.login=${SONAR_KEY} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}

docker_build_job:
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOTEL_IMAGE: ${CI_REGISTRY_IMAGE}/hotel
    DOCKER_HOTEL_CONTEXT: hotel/Dockerfile
  stage: build_push_docker_registry
  image: docker:latest
  services:
    - name: docker:20.10.2-dind
  only:
    changes:
      - hotel/**/*
  before_script:
    - docker login -u ${GITLAB_USER_LOGIN} -p ${CI_TOKEN} ${CI_REGISTRY}
  script:
    - docker pull ${DOCKER_HOTEL_IMAGE}:latest || true
    - docker build
      --cache-from ${DOCKER_HOTEL_IMAGE}:latest
      --tag ${DOCKER_HOTEL_IMAGE}:latest
      --tag ${DOCKER_HOTEL_IMAGE}:${CI_COMMIT_SHORT_SHA} -f ${DOCKER_HOTEL_CONTEXT} .
    - docker push ${DOCKER_HOTEL_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_HOTEL_IMAGE}:latest
  after_script:
    - docker logout ${CI_REGISTRY}

ssh_deploy_qualification_job:
  stage: deploy
  image: kroniak/ssh-client
  only:
    refs:
      - qualification
    changes:
      - hotel/**/*
  tags:
    - qualification-deploy
  variables:
    DOCKER_HOTEL_IMAGE: ${CI_REGISTRY_IMAGE}/hotel
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa ${SSH_REMOTE_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} "docker login -u ${GITLAB_USER_LOGIN} -p ${CI_TOKEN} ${CI_REGISTRY} && docker pull ${DOCKER_HOTEL_IMAGE}"
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} 'docker container stop $(docker container ls -q -f name=${APPLICATION_NAME})' || true
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} "docker run --rm -d -p 8080:8080 --name ${APPLICATION_NAME} --env-file .env ${DOCKER_HOTEL_IMAGE}"
  environment:
    name: qualification
    url: http://${SSH_REMOTE_HOST}

ssh_deploy_master_job:
  stage: deploy
  image: kroniak/ssh-client
  tags:
    - production-deploy
  variables:
    DOCKER_HOTEL_IMAGE: ${CI_REGISTRY_IMAGE}/hotel
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa ${SSH_REMOTE_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} "docker login -u ${GITLAB_USER_LOGIN} -p ${CI_TOKEN} ${CI_REGISTRY} && docker pull ${DOCKER_HOTEL_IMAGE}"
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} 'docker container stop $(docker container ls -q -f name=${APPLICATION_NAME})' || true
    - ssh ${SSH_DEPLOY_USER}@${SSH_REMOTE_HOST} "docker run --rm -d -p 8080:8080 --name ${APPLICATION_NAME} --env-file .env ${DOCKER_HOTEL_IMAGE}"
  environment:
    name: master
    url: http://${SSH_REMOTE_HOST}
  only:
    - tags
  except:
    - branches